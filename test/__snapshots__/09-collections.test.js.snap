// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Collections Maps catches errors thrown by faulty iterators 1`] = `
BadMap {
	0.key => 1
	0.value => 1
	
	1.key => 2
	1.value => 2
	
	RangeError {
		RangeError: You're out
			at Object.next (<rootDir>/test/09-collections.test.js:LINE:COL)
			at print (<rootDir>/print.js:LINE:COL)
			at realPrint (<rootDir>/test/helpers.js:LINE:COL)
			at Object.print (<rootDir>/test/09-collections.test.js:LINE:COL)
			at Promise.then.completed (<rootDir>/node_modules/jest-circus/build/utils.js:LINE:COL)
			at new Promise (<anonymous>)
			at callAsyncCircusFn (<rootDir>/node_modules/jest-circus/build/utils.js:LINE:COL)
			at _callCircusTest (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
			at _runTest (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
			at _runTestsForDescribeBlock (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
		
		strikes: 3
	}
}
`;

exports[`Collections Maps indicates references using \`->\` 1`] = `
input: [
	[
		1
	]
	Map {
		0.key -> input[0]
		0.value => "list"
	}
]
`;

exports[`Collections Maps indicates references using \`->\` 2`] = `
input: [
	[
		1
	]
	Map {
		0.key => "list"
		0.value -> input[0]
	}
]
`;

exports[`Collections Maps indicates references using \`->\` 3`] = `
[
	[]
	Map {
		0.key -> {root}[0]
		0.value => "list"
	}
	Map {
		0.key => "list"
		0.value -> {root}[0]
	}
]
`;

exports[`Collections Maps prints empty maps on one line 1`] = `Map {}`;

exports[`Collections Maps prints empty maps on one line 2`] = `
Map {
	foo: "Bar"
}
`;

exports[`Collections Maps prints object-type keys 1`] = `
Map {
	0.key => {
		a: "a"
		A: "A"
	}
	0.value => "alpha"
	
	1.key => {
		b: "b"
		B: "B"
	}
	1.value => "beta"
	
	2.key => {
		g: "g"
		G: "G"
	}
	2.value => "gamma"
	
	3.key => {
		d: "d"
		D: "D"
	}
	3.value => "delta"
}
`;

exports[`Collections Maps prints object-type keys 2`] = `
Map {
	0.key => {
		colour: 65280
		width: 28.52
		height: 10.2
		range: [
			-20
			12
		]
	}
	0.value => "A"
	
	1.key => {
		name: "John"
		age: "Older than I look"
		occupation: "Larrikin"
		country: "Australia"
		city: "Melbourne"
	}
	1.value => "B"
}
`;

exports[`Collections Maps prints object-type keys 3`] = `
Map {
	0.key => {
		A: {
			colour: 65280
			width: 28.52
			height: 10.2
			range: [
				-20
				12
			]
		}
		B: {
			name: "John"
			age: "Older than I look"
			occupation: "Larrikin"
			country: "Australia"
			city: "Melbourne"
		}
	}
	0.value => "AB"
}
`;

exports[`Collections Maps prints object-type values 1`] = `
Map {
	0.key => "alpha"
	0.value => {
		a: "a"
		A: "A"
	}
	
	1.key => "beta"
	1.value => {
		b: "b"
		B: "B"
	}
	
	2.key => "gamma"
	2.value => {
		g: "g"
		G: "G"
	}
	
	3.key => "delta"
	3.value => {
		d: "d"
		D: "D"
	}
}
`;

exports[`Collections Maps prints object-type values 2`] = `
Map {
	0.key => "alphabeta"
	0.value => {
		alpha: {
			a: "a"
			A: "A"
		}
		beta: {
			b: "b"
			B: "B"
		}
	}
}
`;

exports[`Collections Maps prints properties 1`] = `
Map {
	0.key => "A"
	0.value => "a"
	
	1.key => "B"
	1.value => "b"
	
	2.key => "C"
	2.value => "c"
	
	name: "Quxabaz"
	customProperty: {
		foo: "Bar"
		baz: "Quux"
	}
}
`;

exports[`Collections Maps prints string-type entries 1`] = `
Map {
	0.key => "alpha"
	0.value => "A"
	
	1.key => "beta"
	1.value => "B"
	
	2.key => "gamma"
	2.value => "G"
	
	3.key => "delta"
	3.value => "D"
}
`;

exports[`Collections Maps prints symbol-type entries 1`] = `
Map {
	0.key => "A"
	0.value => Symbol(Alpha)
}
`;

exports[`Collections Maps prints symbol-type entries 2`] = `
Map {
	0.key => Symbol(Alpha)
	0.value => null
}
`;

exports[`Collections Maps prints symbol-type entries 3`] = `
Map {
	0.key => Symbol(Alpha)
	0.value => "A"
}
`;

exports[`Collections Maps prints symbol-type entries 4`] = `
Map {
	0.key => null
	0.value => Symbol(Alpha)
}
`;

exports[`Collections Maps prints symbol-type entries 5`] = `
Map {
	0.key => @@iterator
	0.value => Symbol(Alpha)
}
`;

exports[`Collections Maps prints symbol-type entries 6`] = `
Map {
	0.key => Symbol(Alpha)
	0.value => @@iterator
}
`;

exports[`Collections Sets catches errors thrown by faulty iterators 1`] = `
BadSet {
	0 => 1
	1 => 2
	RangeError {
		RangeError: You're out
			at Object.next (<rootDir>/test/09-collections.test.js:LINE:COL)
			at v (<rootDir>/print.js:LINE:COL)
			at realPrint (<rootDir>/test/helpers.js:LINE:COL)
			at Object.print (<rootDir>/test/09-collections.test.js:LINE:COL)
			at Promise.then.completed (<rootDir>/node_modules/jest-circus/build/utils.js:LINE:COL)
			at new Promise (<anonymous>)
			at callAsyncCircusFn (<rootDir>/node_modules/jest-circus/build/utils.js:LINE:COL)
			at _callCircusTest (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
			at _runTest (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
			at _runTestsForDescribeBlock (<rootDir>/node_modules/jest-circus/build/run.js:LINE:COL)
		
		strikes: 3
	}
}
`;

exports[`Collections Sets disambiguates entries and numeric properties 1`] = `
input: {
	set: Set {
		0 => {
			b: "c"
		}
		1 => {
			bar: "Baz"
		}
		
		1: {
			nah: "Nope"
		}
		foo: -> input.set[1]
		bar: -> input.set.1
	}
}
`;

exports[`Collections Sets indicates references using \`->\` 1`] = `
{
	foo: "Foo"
	bar: {
		name: "Bar"
	}
	baz: Set {
		0 -> {root}.bar
	}
}
`;

exports[`Collections Sets prints basic entries 1`] = `
Set {
	0 => "A"
	1 => "B"
	2 => 204
}
`;

exports[`Collections Sets prints empty sets on one line 1`] = `Set {}`;

exports[`Collections Sets prints empty sets on one line 2`] = `
Set {
	foo: "Bar"
}
`;

exports[`Collections Sets prints nested sets 1`] = `
Set {
	0 => 1
	1 => {
		colour: 65280
		width: 28.52
		height: 10.2
		range: [
			-20
			12
		]
	}
	2 => "3"
	3 => Set {
		0 => 2
		1 => {
			name: "John"
			age: "Older than I look"
			occupation: "Larrikin"
			country: "Australia"
			city: "Melbourne"
		}
		2 => "4"
	}
}
`;

exports[`Collections Sets prints object-type entries 1`] = `
Set {
	0 => "0"
	1 => {
		colour: 65280
		width: 28.52
		height: 10.2
		range: [
			-20
			12
		]
	}
	2 => {
		name: "John"
		age: "Older than I look"
		occupation: "Larrikin"
		country: "Australia"
		city: "Melbourne"
	}
	3 => "C"
}
`;

exports[`Collections Sets prints properties 1`] = `
Set {
	0 => "A"
	1 => "B"
	2 => "C"
	
	name: "Quxabaz"
	customProperty: {
		foo: "Bar"
		baz: "Quux"
	}
}
`;

exports[`Collections Sets prints symbol-type entries 1`] = `
Set {
	0 => @@iterator
	1 => Symbol(Foo)
}
`;

exports[`Collections WeakMaps prints empty maps on one line 1`] = `WeakMap {}`;

exports[`Collections WeakMaps prints properties 1`] = `
WeakMap {
	a: "ABC"
}
`;

exports[`Collections WeakMaps prints properties 2`] = `
WeakMap {
	a: "ABC"
	b: "XYZ"
}
`;

exports[`Collections WeakSets prints empty sets on one line 1`] = `WeakSet {}`;

exports[`Collections WeakSets prints properties 1`] = `
WeakSet {
	a: "ABC"
}
`;

exports[`Collections WeakSets prints properties 2`] = `
WeakSet {
	a: "ABC"
	b: "XYZ"
}
`;
